import requests
from bs4 import BeautifulSoup
import asyncio
from telegram import Bot
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from telegram.error import RetryAfter

from webdriver_manager.chrome import ChromeDriverManager

import json


# DEVELOPER SOUVIK NANDI


# Initialize the Telegram Bot
TELEGRAM_BOT_TOKEN = '7928888516:AAE82_yFNmgv1SmExXnqW8-2UkP8jbEbt0g'  # Your bot token
CHAT_IDS = []

# Step 1: Check the botlineserver.json for status
status_url = "https://souviknandi1.github.io/SouvikNandi1/botlineserver.json"
status_response = requests.get(status_url)
status_data = status_response.json()

# Step 2: Check the "Rohit" status
rohit_status = status_data["api"][0].get("Rohit", "unknown")

# Step 3: If "Rohit" is not stable, notify user to contact developer
if rohit_status != "stable":
    print("Service is not stable. Contact Souvik Nandi at:")
    print("Phone: 8653162208")
    print("Telegram: https://t.me/SouvikNandi1")
    input("Enter To Close")
else:
    # Step 4: Proceed if "Rohit" is stable
    print("Rohit status is stable. Proceeding with sending match URL.")

    # Step 5: Fetch chat IDs from cricketlineserver.json
    url = "https://souviknandi1.github.io/SouvikNandi1/cricketlineserver.json"
    response = requests.get(url)
    data = response.json()
    CHAT_IDS = data.get("CHAT_IDS", [])

    # Step 6: Let the user select which chat ID(s) to send the message to
    print("Select chat ID:")
    print("1 - Specific ID")
    print("2 - All IDs")
    
    choice = input("Enter 1 for specific ID or 2 for all IDs: ")

    if choice == "1":
        print("Available IDs:", CHAT_IDS)
        selected_id = input("Enter a specific chat ID from the list above: ")
        CHAT_IDS = [selected_id] if selected_id in CHAT_IDS else []
    elif choice == "2":
        # Use all IDs
        CHAT_IDS = CHAT_IDS
    else:
        print("Invalid choice. Defaulting to all IDs.")
        CHAT_IDS = CHAT_IDS

    # Step 7: Send the match URL to the selected chat IDs
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    LINK = input("Enter the match URL: ")

    for chat_id in CHAT_IDS:
        try:
            bot.send_message(chat_id=chat_id, text=f"Match URL: {LINK}")
            print(f"Sent match URL to chat ID: {chat_id}")
        except Exception as e:
            print(f"Error sending message to chat ID {chat_id}: {e}")


# brave_path = "C:/Program Files/BraveSoftware/Brave-Browser/Application/brave.exe"  
brave_path = "C:/Program Files/BraveSoftware/Brave-Browser-Beta/Application/brave.exe"

chrome_options = Options()
chrome_options.binary_location = brave_path  # Set Brave binary location




chrome_options.add_argument("--start-maximized")  # Start maximized
chrome_options.add_argument("--disable-infobars")  # Disable the infobars
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

# Initialize the WebDriver for Brave
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
# driver = webdriver.Chrome(service=BraveService(ChromeDriverManager(chrome_type=ChromeType.BRAVE).install()))


# Function to fetch match details from the website
def fetch_match_details():
    url = LINK
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    # Extract necessary details
    series_name = soup.select_one('.series-name .name-wrapper span')
    series_name = series_name.text if series_name else "Series not found"
    
    team_1_name = soup.select_one('.team-name.team-1')
    team_1_name = team_1_name.text.strip() if team_1_name else "Team 1 not found"
    
    team_1_score_div = soup.select_one('.team-score .runs')
    team_1_score = "--"
    if team_1_score_div:
        team_1_score_spans = team_1_score_div.select('span')
        if len(team_1_score_spans) >= 2:
            team_1_runs = team_1_score_spans[0].text.strip().replace('-', '/')
            team_1_overs = team_1_score_spans[1].text.strip()
            team_1_score = f"**{team_1_overs} 🎾 {team_1_runs}**"
    
    team_2_name = soup.select_one('.team-name.team-2')
    team_2_name = team_2_name.text.strip() if team_2_name else "Team 2 not found"
    
    team_2_score_div = soup.select('.team-score .runs')[1] if len(soup.select('.team-score .runs')) > 1 else None
    team_2_score = "--"
    if team_2_score_div:
        team_2_score_spans = team_2_score_div.select('span')
        if len(team_2_score_spans) >= 2:
            team_2_runs = team_2_score_spans[0].text.strip().replace('-', '/')
            team_2_overs = team_2_score_spans[1].text.strip()
            team_2_score = f"**{team_2_overs} 🎾 {team_2_runs}**"
    
    team_2_crr = soup.select_one('.team-run-rate .data')
    team_2_crr = team_2_crr.text.strip() if team_2_crr else "CRR not found"

    
    land = soup.select_one('.team-result')
    land = land.text.strip() if land else "-"

    final_result = soup.select_one('.final-result')
    final_result = final_result.text.strip() if final_result else "---"

    # Ball-by-ball overs data
    overs_data = []
    over_slides = soup.select('.overs-slide')

    if over_slides:  # Check if there are any .overs-slide elements
        last_over_slide = over_slides[-1]  # Get the last .overs-slide

        over_info = last_over_slide.select_one('.content span')
        total_runs = last_over_slide.select_one('.total').text.strip().replace('=', '').strip() if last_over_slide.select_one('.total') else "Total runs not found"
        ball_runs = [ball.text.strip() for ball in last_over_slide.select('.over-ball')]

        overs_data.append({
            "over_info": over_info.text.strip() if over_info else "Over info not found",
            "total_runs": total_runs,
            "ball_runs": ball_runs
        })
    batsmen_data = []
    batsmen_wrappers = soup.select('.batsmen-partnership')  # Select all batsmen partnership sections

    # Loop through the first two batsmen
    for i, wrapper in enumerate(batsmen_wrappers):
        batsman_name_element = wrapper.select_one('.batsmen-name p')  # Get batsman name
        batsman_score_element = wrapper.select_one('.batsmen-score p:nth-of-type(1)')  # Get runs
        batsman_balls_element = wrapper.select_one('.batsmen-score p:nth-of-type(2)')  # Get balls faced
        is_on_strike = wrapper.select_one('.circle-strike-icon') is not None  # Check if on strike

        if batsman_name_element and batsman_score_element and batsman_balls_element:
            batsman_name = batsman_name_element.text.strip()
            # Append "(on strike)" if the batsman is on strike
            if is_on_strike:
                batsman_name += " ON STRIKE"
            
            batsmen_data.append({
                "name": batsman_name,
                "score": batsman_score_element.text.strip(),
                "balls": batsman_balls_element.text.strip(),
                "is_on_strike": is_on_strike  # Ensure to include the on-strike status
            })
        
        # Stop after collecting two batsmen
        if i == 1:
            break

    # Output the structured data for the batsman who is on strike
    # Now to get the second batsman information separately
    batsmen_data_2 = []
    if len(batsmen_wrappers) > 2:
        wrapper = batsmen_wrappers[2]  # Get the third batsman (index 2)
        batsman_name_element = wrapper.select_one('.batsmen-name p')  # Get batsman name
        batsman_score_element = wrapper.select_one('.batsmen-score p:nth-of-type(1)')  # Get runs
        batsman_balls_element = wrapper.select_one('.batsmen-score p:nth-of-type(2)')  # Get balls faced
        is_on_strike = wrapper.select_one('.circle-strike-icon') is not None  # Check if on strike

        if batsman_name_element and batsman_score_element and batsman_balls_element:
            batsman_name = batsman_name_element.text.strip()
            if is_on_strike:
                batsman_name += " (on strike)"
            
            batsmen_data_2.append({
                "name": batsman_name,
                "score": batsman_score_element.text.strip(),
                "balls": batsman_balls_element.text.strip()
            })
    return series_name, land, team_1_name, team_1_score, team_2_name, team_2_score, team_2_crr, overs_data, final_result, batsmen_data ,batsmen_data_2 
# Function to fetch odds data using Selenium
def fetch_odds_data():
    # Navigate to the URL
    driver.get(LINK)

    try:
        # Check if the current page is already in the correct state
        current_url = driver.current_url
        odds_view_xpath = "//div[contains(@class, 'view') and contains(text(), 'Odds View')]"
        
        # Wait for the "Odds View" element to be visible
        odds_view_div = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.XPATH, odds_view_xpath))
        )
        
        # Click the "Odds View" only if it hasn't been activated yet
        if "odds_view_active" not in driver.page_source:  # Custom condition to check state
            driver.execute_script("arguments[0].click();", odds_view_div)

        # Wait for the odds sessions to load completely
        WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.XPATH, "//app-odds"))
        )

        # Get the page source after interacting
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        odds_sessions = soup.find_all('app-odds')

        odds_data = []

        for session in odds_sessions:
            fav_session = soup.find('div', class_='fav-odd fav-session')
        
            # Extract "50 Ov Runs" and the YES/NO odds if present
            if fav_session:
                title = fav_session.find('div', class_='fav').find('span').text.strip() if fav_session.find('div', class_='fav') else "N/A"
                
                # Find the yes-no-odds section and retrieve "YES" and "NO" odds
                yes_no_odds = fav_session.find('div', class_='yes-no-odds')
                no_odds = yes_no_odds.find('div', class_='no').find_all('span')[1].text.strip() if yes_no_odds and yes_no_odds.find('div', class_='no') else "N/A"
                yes_odds = yes_no_odds.find('div', class_='yes').find_all('span')[1].text.strip() if yes_no_odds and yes_no_odds.find('div', class_='yes') else "N/A"
            else:
                title = "N/A"
                no_odds = "N/A"
                yes_odds = "N/A"

            session_lambi = soup.find('div', class_='session-lambi after-full-ov')
            if session_lambi:
                lambi_title = session_lambi.find('div', class_='lambi').find('span').text.strip() if session_lambi.find('div', class_='lambi') else "N/A"
                lambi_yes_no_odds = session_lambi.find('div', class_='yes-no-odds')
                lambi_no_odds = lambi_yes_no_odds.find('div', class_='no').find_all('span')[1].text.strip() if lambi_yes_no_odds and lambi_yes_no_odds.find('div', class_='no') else "N/A"
                lambi_yes_odds = lambi_yes_no_odds.find('div', class_='yes').find_all('span')[1].text.strip() if lambi_yes_no_odds and lambi_yes_no_odds.find('div', class_='yes') else "N/A"
            else:
                lambi_title = "N/A"
                lambi_no_odds = "N/A"
                lambi_yes_odds = "N/A"

            # Extract the probability, favorite team, and odds view from each session
            probability = session.find(class_='content')
            fav_team = session.find(class_='rate-team-full-name')
            odds_values = [odd.text.strip() for odd in session.find_all(class_='odd')]

            # Format odds values based on the number of words
            formatted_odds_values = []
            for odds in odds_values:
                words = odds.split()
                if len(words) == 4:
                    formatted_odds = '-'.join(words)
                elif odds.isdigit() and len(odds) == 4:
                    formatted_odds = f"{odds[:2]}-{odds[2:]}"
                else:
                    formatted_odds = odds
                formatted_odds_values.append(formatted_odds)

            # Append all collected data in odds_data
            odds_data.append({
                "Title": title,
                "NO Odds": no_odds,
                "YES Odds": yes_odds,
                "Probability": probability.text.strip() if probability else "N/A",
                "Fav Team": fav_team.text.strip().split()[0] if fav_team else "N/A",
                "LAM1":lambi_title,
                "LAM2":lambi_no_odds,
                "LAM3":lambi_yes_odds,
                "Odds View": formatted_odds_values
            })

        return odds_data

    except Exception as e:
        print(f"Error fetching odds data: {e}")
        return []


async def send_message(message):
    if not message:  # Check if the message is empty
        print("No message to send.")
        return  # Exit the function if the message is empty

    for chat_id in CHAT_IDS:
        while True:
            try:
                await bot.send_message(chat_id=chat_id, text=f"*{message.replace('-', '\\-')}*", parse_mode="MarkdownV2")
                break
            except RetryAfter as e:
                print(f"Flood control exceeded. Retrying in {e.retry_after} seconds...")
                await asyncio.sleep(e.retry_after)
            except Exception as ex:
                print(f"An error occurred: {ex}")
                break

# Main loop to update match details and show ball-by-ball updates
async def main():
    last_ball_data = {} 
    last_team_1_score = ""
    last_team_2_score = ""
    last_land = ""
    max_retries = 5  # Define the maximum number of retries
    retry_count = 0 
    while True:
        
        # series_name, land, team_1_name, team_1_score, team_2_name, team_2_score, team_2_crr, overs_data, final_result, batsmen_data , batsmen_data_2  = fetch_match_details()
        
        try:
            # Attempt to fetch match details
            (
                series_name, land, team_1_name, team_1_score, 
                team_2_name, team_2_score, team_2_crr, 
                overs_data, final_result, batsmen_data, batsmen_data_2
            ) = fetch_match_details()

            # Reset retry count after a successful fetch
            retry_count = 0
            if land != last_land:
                # if "Wicket" in land:
                #     land_output = "🚾 WKT GYA WKT 🚾"
                
                if land.strip() == "Wicket": 
                    land_output = "🚾 WKT GYA WKT 🚾"
                
                elif land.strip() == "Wide Ball": 
                    land_output = "WIDE AYA WIDE"

                elif land.strip().lower() == "ball in air": 
                    land_output = "HAWA ME  ☄️☄️ ✔️"

                elif land.strip() == "No Ball":
                    land_output = "☄️ NO BALL ☄️\n🏏 FREE HIT CHALU 🏏"

                elif land.strip() == "Ball": 
                    land_output = "BALL CHALU 🎾"
                
                elif land.strip() == "Bowler Stopped": 
                    land_output = "BOWLER RUKA ✔️✔️"
                
                elif land.strip() == "Third Umpire":
                    land_output = "🕵️‍♀️ 3RD UMPIRE 🕵️‍♀️"

                elif land.strip() == "Innings Break":
                    land_output = "Innings Break"
                    land_output += "\n\n"  # Add a newline for separation
                    land_output += "Jaoo chai sutta marr ke aoo mood fresh krke thak gye hoge loss khate khate 😌"

                
                elif "Over" in land:
        
                    land_output = "OVER" 
                    combined_batsmen_data = batsmen_data + batsmen_data_2

                    # Take only the first two batsmen
                    first_two_batsmen = combined_batsmen_data[:2]

                    # Build a single message string for the first two batsmen
                    message_content = "\n".join(
                        f"**{batsman['name']} :- {batsman['score']}**" for batsman in first_two_batsmen
                    )

                    # Send the message only once
                    await send_message(message_content)



                    # message2 = f""
                    # for bowler in batsmen_data:
                    #     message2 += f"{bowler['name']} - {bowler['score']} {bowler['balls']}\n"
                    #     await send_message(message2)


                    for over in overs_data:
                        over_info = over.get("over_info", None)
                        total_runs = over.get("total_runs", "N/A")
                        ball_runs = over.get("ball_runs", [])

                        # Debug print to check values
                        # print(f"Over Info: {over_info}, Total Runs: {total_runs}, Ball Runs: {ball_runs}")

                        if over_info not in last_ball_data or last_ball_data[over_info] != ball_runs:
                            # Escape reserved characters
                            escaped_message = (
                                f"**SCORE CARD :- {total_runs}**\n"
                                f"**{' '.join(ball_runs)}**\n\n"
                            )
                            
                            # print(f"Sending message: {escaped_message}")  # Log the message to be sent
                            
                            try:
                                await send_message(escaped_message)
                                # print(f"Message sent: {escaped_message}")
                            except Exception as e:
                                print(f"Error sending message: {e}")
                                
                            last_ball_data[over_info] = ball_runs  # Update last_ball_data
                else:

                    last_land_value = None  # 
                    try:
                        land_value = int(land)  
                        if land_value >= 0:  # 
                            if land_value == last_land_value:
                                land_output = f"**{land_value} (Duplicate)** "  
                            else:
                                land_output = f"**{land_value}** "
                                last_land_value = land_value 
                        else:
                            land_output = f"**{land.upper()}**"  
                    except ValueError:
                        land_output = f"**{land.upper()}**" 

                await send_message(land_output)
                last_land = land  
            
                # Initialize the message
                # message = ""

                # # Loop through the teams_data and add scores to the message if they exist
                # for team in teams_data:
                #     if team['score'] != "Score not found":
                #         message += f"{team['score']}\n"  # Add a newline for readability

                # # Replace periods with "A" in the message
                # message = message.replace(".", "▫")

                # # Check if the modified message is not empty, then attempt to send it
                # if message.strip():  # strip() removes any excess whitespace just in case
                #     try:
                #         await send_message(message)
                #     except Exception as e:
                #         print("Error sending message:", e)
                # else:
                #     print("No scores to display.")
            message8 = ""

            if team_1_score != last_team_1_score or team_2_score != last_team_2_score:
                message8 += f"{team_1_score.upper()}\n"
                message2 = message8.replace(".", "•")
                await send_message(message2)
                
                


                odds_data = fetch_odds_data()
                message = f""
                for batsman in batsmen_data:
                        if batsman["is_on_strike"]:
                            message += f"{batsman['name']} 🏏🏏"
                await send_message(message)
                message = f""
                
                if "opt to Bowl" not in final_result and "opt to Bat" not in final_result:
                    message += f"{final_result.upper()}\n"
                    

                # Send the message only if it's not empty (i.e., not skipped)
                if message:
                    await send_message(message)

                message = f""
                for odds in odds_data:
                    await send_message(f"**{', '.join(odds['Odds View']).upper()} 🇩🇪 {odds['Fav Team'].upper()}** 🇩🇪\n\n")
                for odds in odds_data:
                # Check if NO Odds is a valid integer
                    if odds['NO Odds'].isdigit():
                        # Send the message immediately if NO Odds is a valid integer
                        await send_message(
                            f"**{odds['Title'].upper()} 👉🏻 {odds['NO Odds'].upper()}-{odds['YES Odds'].upper()}**\n\n"
                        )
                    else:
                        # Wait for 5 seconds
                        await asyncio.sleep(5)
                        if odds['NO Odds'].isdigit():
                            await send_message(
                                f"**{odds['Title'].upper()} 👉🏻 {odds['NO Odds'].upper()}-{odds['YES Odds'].upper()}**\n\n"
                            )
                for odds in odds_data:

                    if odds['LAM1'] != "N/A" and odds['LAM2'].isdigit():
                        # Send the message immediately if NO Odds is a valid integer
                        await send_message(
                            f"**{odds['LAM1'].upper()} 👉🏻 {odds['LAM2'].upper()}-{odds['LAM3'].upper()}**\n\n"
                        )
                    else:
                        # Wait for 5 seconds if 'LAM1' is not 'N/A' but 'NO Odds' is not a valid integer
                        await asyncio.sleep(5)
                        if odds['LAM1'] != "N/A" and odds['LAM2'].isdigit():
                            await send_message(
                                f"**{odds['LAM1'].upper()} 👉🏻 {odds['LAM2'].upper()}-{odds['LAM3'].upper()}**\n\n"
                            )
                last_team_1_score = team_1_score
                last_team_2_score = team_2_score
                await asyncio.sleep(0)
        except Exception as e:
        # Increment retry count if there's an issue fetching data
            retry_count += 1
            if retry_count > max_retries:
                print("Max retries reached. Continuing script without breaking.")
                retry_count = 0  # Reset the counter and continue trying

            print(f"Data fetch delayed or failed. Retrying... ({retry_count}/{max_retries})")
        
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exiting...")
    finally:
        print("Keeping the WebDriver open...")

